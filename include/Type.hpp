#ifndef TYPE_HPP_TPOWA9WD
#define TYPE_HPP_TPOWA9WD

#include <array>
#include <bitset>
#include <cctype>
#include <cstdint>
#include <cstdio>
#include <fstream>
#include <iomanip> //用于格式化输出
#include <ios>
#include <iostream>
#include <iterator>
#include <math.h>
#include <memory>
#include <netinet/in.h>
#include <sstream>
#include <string.h>
#include <string>
#include <vector>

using namespace std;

#define COMPONENT_SIZE 8
#define MCU_UNIT_SIZE 8 * 8
/* 量化步长 1-100 差->好*/
#define QUANTIZATION_FLOAT 90
#define QUANTIZATION_TAB_SIZE 8 * 8
/* 每个量化表的的大小为64字节 */
#define HUFFMAN_CODE_LENGTH_POSSIBLE 16
// Huffman code的长度定义为有16种可能

enum JFIF {
  SOI = 0xD8,
  APP0 = 0xE0,
  DQT = 0xDB,
  SOF0 = 0xC0,
  SOF2 = 0xC2,
  DHT = 0xC4,
  SOS = 0xDA,
  EOI = 0xD9,
  COM = 0xFE
};

enum RGBComponents { RED, GREEN, BLUE };
enum YUVComponents { Y, Cb, Cr };
enum FileFormat { BMP, YUV, PPM, RGB };

struct Pixel {
  int16_t comp[3] = {0};
};

/* Huffman表 */
typedef array<pair<int, vector<uint8_t>>, HUFFMAN_CODE_LENGTH_POSSIBLE>
    HuffmanTable;

/* 量化表 */
typedef vector<uint16_t> QuantizationTable;

/* 3个二维矩阵(Y,U,V) */
typedef array<array<array<int, 8>, 8>, 3> CompMatrices;

/* 3个二维逆DCT系数 */
typedef array<array<array<float, 8>, 8>, 3> IDCTCoeffs;

/* 3个二维DCT系数 */
typedef array<array<array<float, 8>, 8>, 3> DCTCoeffs;

/* 量化表 */
const uint8_t LumaTable[COMPONENT_SIZE][COMPONENT_SIZE] = {
    {16, 11, 10, 16, 24, 40, 51, 61},     {12, 12, 14, 19, 26, 58, 60, 55},
    {14, 13, 16, 24, 40, 57, 69, 56},     {14, 17, 22, 29, 51, 87, 80, 62},
    {18, 22, 37, 56, 68, 109, 103, 77},   {24, 35, 55, 64, 81, 104, 113, 92},
    {49, 64, 78, 87, 103, 121, 120, 101}, {72, 92, 95, 98, 112, 100, 103, 99}};

const uint8_t ChromaTable[COMPONENT_SIZE][COMPONENT_SIZE] = {
    {17, 18, 24, 47, 99, 99, 99, 99}, {18, 21, 26, 66, 99, 99, 99, 99},
    {24, 26, 56, 99, 99, 99, 99, 99}, {47, 66, 99, 99, 99, 99, 99, 99},
    {99, 99, 99, 99, 99, 99, 99, 99}, {99, 99, 99, 99, 99, 99, 99, 99},
    {99, 99, 99, 99, 99, 99, 99, 99}, {99, 99, 99, 99, 99, 99, 99, 99}};

/* Huffman表 */
const uint8_t HuffmanLumaDCLenTable[HUFFMAN_CODE_LENGTH_POSSIBLE] = {
    00, 01, 05, 01, 01, 01, 01, 01, 01, 00, 00, 00, 00, 00, 00, 00};

// 12 = 1 + 5 + 1 + 1 + 1 + 1 + 1 + 1
const uint8_t HuffmanLumaDCValueTable[12] = {0, 1, 2, 3, 4,   5,
                                             6, 7, 8, 9, 0xA, 0xB};

const uint8_t HuffmanLumaACLenTable[HUFFMAN_CODE_LENGTH_POSSIBLE] = {
    00, 02, 01, 03, 03, 02, 04, 03, 05, 05, 04, 04, 00, 00, 01, 0x7d};

// 162 = 2 + 1 + 3 + 3 + 2 + 4 + 3 + 5 + 5 + 4 + 4 + 1 + 7d(125)
const uint8_t HuffmanLumaACValueTable[162] = {
    0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06,
    0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81, 0x91, 0xA1, 0x08,
    0x23, 0x42, 0xB1, 0xC1, 0x15, 0x52, 0xD1, 0xF0, 0x24, 0x33, 0x62, 0x72,
    0x82, 0x09, 0x0A, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x25, 0x26, 0x27, 0x28,
    0x29, 0x2A, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44, 0x45,
    0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59,
    0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74, 0x75,
    0x76, 0x77, 0x78, 0x79, 0x7A, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89,
    0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0xA2, 0xA3,
    0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6,
    0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9,
    0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xE1, 0xE2,
    0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF1, 0xF2, 0xF3, 0xF4,
    0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA};

const uint8_t HuffmanChromaDCLenTable[HUFFMAN_CODE_LENGTH_POSSIBLE] = {
    00, 03, 01, 01, 01, 01, 01, 01, 01, 01, 01, 00, 00, 00, 00, 00};

// 12 = 3 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
const uint8_t HuffmanChromaDCValueTable[12] = {0, 1, 2, 3, 4,   5,
                                               6, 7, 8, 9, 0xA, 0xB};

const uint8_t HuffmanChromaACLenTable[HUFFMAN_CODE_LENGTH_POSSIBLE] = {
    00, 02, 01, 02, 04, 04, 03, 04, 07, 05, 04, 04, 00, 01, 02, 0x77};

// 162 = 0+ 2+ 1+ 2+4+ 4+ 3+ 4+ 7+ 5+ 4+ 4+ 0+ 1+ 2+ 0x77
const uint8_t HuffmanChromaACValueTable[162] = {
    0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41,
    0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14, 0x42, 0x91,
    0xA1, 0xB1, 0xC1, 0x09, 0x23, 0x33, 0x52, 0xF0, 0x15, 0x62, 0x72, 0xD1,
    0x0A, 0x16, 0x24, 0x34, 0xE1, 0x25, 0xF1, 0x17, 0x18, 0x19, 0x1A, 0x26,
    0x27, 0x28, 0x29, 0x2A, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x43, 0x44,
    0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
    0x59, 0x5A, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x73, 0x74,
    0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
    0x88, 0x89, 0x8A, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A,
    0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xB2, 0xB3, 0xB4,
    0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
    0xC8, 0xC9, 0xCA, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDa,
    0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xF2, 0xF3, 0xF4,
    0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA};

#endif /* end of include guard: TYPE_HPP_TPOWA9WD */
